// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc4680.Dash2019.subsystems;


import com.revrobotics.CANSparkMax;
import com.revrobotics.CANSparkMax.IdleMode;
import com.revrobotics.CANSparkMaxLowLevel.ConfigParameter;
import com.revrobotics.CANSparkMaxLowLevel.MotorType;

import org.usfirst.frc4680.Dash2019.commands.*;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj.shuffleboard.Shuffleboard;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj.command.Subsystem;
import edu.wpi.first.wpilibj.PIDOutput;
import edu.wpi.first.wpilibj.PIDSource;
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.Compressor;
import edu.wpi.first.wpilibj.DigitalInput;
import edu.wpi.first.wpilibj.DoubleSolenoid;
import edu.wpi.first.wpilibj.Spark;
import edu.wpi.first.wpilibj.SpeedController;
import edu.wpi.first.wpilibj.DoubleSolenoid.Value;

// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS

/**
 *
 */
public class Climber extends Subsystem {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    private static final Value EXTENDED = Value.kForward;
    private static final Value RETRACTED = Value.kReverse;
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private Compressor compressor1;
    private DoubleSolenoid doubleSolenoidFront;
    private DoubleSolenoid doubleSolenoidRear;
    private CANSparkMax climberDrive;
    private DigitalInput stepSensor;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS



    public Climber() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        compressor1 = new Compressor(0);
        addChild("Compressor 1",compressor1);
        
        
        doubleSolenoidFront = new DoubleSolenoid(0, 0, 1);
        addChild("Double Solenoid 1",doubleSolenoidFront);
        
        doubleSolenoidRear = new DoubleSolenoid(0, 5, 6);
        addChild("Double Solenoid 2",doubleSolenoidRear);
        
        climberDrive = new CANSparkMax(7, MotorType.kBrushless );
        climberDrive.setInverted(true);
        climberDrive.setIdleMode(IdleMode.kCoast);
        climberDrive.setParameter(ConfigParameter.kInputDeadband, 0.10);
        
        stepSensor = new DigitalInput(0);
        addChild("StepSensor",stepSensor);
        
        frontLegsExtend(false);
        backLegsExtend(false); 
        

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS


    }

    @Override
    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND


        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        // Set the default command for a subsystem here.
        // setDefaultCommand(new MySpecialCommand());
    }

    @Override
    public void periodic() {
        // Put code here to be run every loop
        SmartDashboard.putBoolean("Front Legs", isFrontLegsExtended());
        SmartDashboard.putBoolean("Back Legs", isBackLegsExtended());
        SmartDashboard.putNumber("ClimberDrive", climberDrive.get());
    }

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CMDPIDGETTERS


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CMDPIDGETTERS

    // Put methods for controlling this subsystem
    // here. Call these from Commands.

    public void frontLegsExtend(boolean flag) {
        if (flag) {
            doubleSolenoidFront.set(EXTENDED);
        } else {
            doubleSolenoidFront.set(RETRACTED);
        }
    }

    public void backLegsExtend(boolean flag) {
        if (flag) {
            doubleSolenoidRear.set(EXTENDED);
        } else {
            doubleSolenoidRear.set(RETRACTED);
            climberDrive.stopMotor();
        }
    }

    public boolean isBackLegsExtended() {
        return doubleSolenoidRear.get() == EXTENDED;
    }

    public boolean isFrontLegsExtended() {
        return doubleSolenoidFront.get() == EXTENDED;
    }

    public void drive(double speed) {
        climberDrive.set(Math.signum(speed) * speed * speed);
    }
}

